{"version":3,"sources":["components/sidebar.js","components/map.js","App.js","reportWebVitals.js","index.js"],"names":["Sidebar","props","checkRange","input","min","max","className","countriesList","data","map","latlng","box","push","getCountries","item","onClick","onClickHandler","toString","name","Map","mapboxgl","accessToken","mapContainerRef","useRef","useState","setMap","bBox","updateBox","currentMarker","updateMarker","currentPopup","updatePopup","setBoundries","cords","getBounds","sw","_sw","toArray","ne","_ne","queryMap","location","remove","lngLat","apiURI","fetch","then","response","json","fitBounds","features","bbox","marker","Marker","setLngLat","addTo","queryWeather","localStorage","clear","popup","Popup","setHTML","main","temp","feels_like","humidity","temp_min","temp_max","setMaxWidth","useEffect","container","current","style","center","zoom","on","hasOwnProperty","split","nav","NavigationControl","addControl","scale","ScaleControl","maxWidth","unit","ref","bind","this","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbc30bdd.chunk.js","sourcesContent":["import './css/sidebar.css';\n\n// Grab JSON data\nimport data from '../data/countries.json';\n\nfunction Sidebar(props) {\n  const checkRange = (input, min, max) => {\n    if (min <= input && input <= max) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const getCountries = () => {\n    var countriesList = []\n    data.map((data) => {\n        if (checkRange(data.latlng[0], props.box[1], props.box[3]) && checkRange(data.latlng[1], props.box[0], props.box[2])) {\n            countriesList.push(data);\n        }\n    });\n    return countriesList;\n  }\n\n  return (\n    <div className=\"Sidebar\">\n      {getCountries().map(item => (\n        <div className=\"Item\" \n          onClick={() => props.onClickHandler(item.latlng,props.map)}>\n          <div><span>Coordinance:</span> {item.latlng[0].toString()} - {item.latlng[1].toString()}</div>\n          <div>{item.name}</div>\n        </div>))}      \n    </div>\n  );\n}\n  \nexport default Sidebar;","\nimport React, { useRef, useEffect, useState} from 'react';\nimport mapboxgl from 'mapbox-gl';\n\nimport Sidebar from './sidebar'\n\nimport './css/map.css';\n\nfunction Map() {\n    // Map vars\n    mapboxgl.accessToken = 'pk.eyJ1IjoidG9tYWJhayIsImEiOiJja2dycm1wbzMwMzc2MnZtam9tZzZjN3d3In0.KXJ-v2o0MTK_6u9hBMss-w';\n    const mapContainerRef = useRef();\n    const [map, setMap] = useState({});\n    const [bBox, updateBox] = useState([]);\n    const [currentMarker, updateMarker] = useState(null);\n    const [currentPopup, updatePopup] = useState(null);\n\n    // Helper Functions\n    const setBoundries = (map) => {\n        let cords = map.getBounds();\n        let sw = cords._sw.toArray();\n        let ne = cords._ne.toArray();\n        // Lng -> Lat\n        updateBox([sw[0],sw[1],ne[0],ne[1]]);\n    }\n    const queryMap = (location,map) => {\n        if (currentMarker !== null) { currentMarker.remove(); };\n        if (currentPopup !== null) { currentPopup.remove(); };\n        const lngLat = [location[1], location[0]];\n        const apiURI = 'https://api.tiles.mapbox.com/geocoding/v5/mapbox.places/'+lngLat+'.json?types=country&access_token='+mapboxgl.accessToken;\n        fetch(apiURI)\n            .then(response => response.json())\n            .then(data => {\n                map.fitBounds(data.features[0].bbox);\n                let marker = new mapboxgl.Marker()\n                    .setLngLat(lngLat)\n                    .addTo(map);\n                updateMarker(marker);\n                queryWeather(location,map);\n                localStorage.clear();\n                localStorage.location = \"\"+location;\n            });\n    }\n    const queryWeather = (location,map) => {\n        const apiKey =\"4698dd520217975796ac8e8f48b4eb15\";\n        let apiURI = 'https://api.openweathermap.org/data/2.5/weather'+\n            '?lat='+location[0]+\n            '&lon='+location[1]+\n            '&appid='+apiKey+\n            '&units=metric';\n        fetch(apiURI)\n        .then(response => response.json())\n        .then(data => {\n            // inconsistent data\n            //let center = map.getCenter().toArray();\n            let popup = new mapboxgl.Popup({className: 'weatherPopup'})\n                .setLngLat([location[1],location[0]])\n                .setHTML(\"<div><label>Temp:</label> \"+data.main.temp+\"&deg;C</div>\"+\n                    \"<div><label>Fells Like:</label> \"+data.main.feels_like+\"&deg;C</div>\"+\n                    \"<div><label>Humidity:</label> \"+data.main.humidity+\" %</div>\"+\n                    \"<div><label>Variation:</label> \"+data.main.temp_min+\" - \"+data.main.temp_max+\"&deg;C</div>\")\n                .setMaxWidth(\"300px\")\n                .addTo(map);\n            updatePopup(popup);\n        });\n    }\n\n    useEffect(() => {\n        const map = new mapboxgl.Map({\n            container: mapContainerRef.current,\n            style: 'mapbox://styles/mapbox/satellite-streets-v11',\n            center: [5, 45],\n            zoom: 6\n        });\n        map.on('load', () => {\n            setBoundries(map);\n            if (localStorage.hasOwnProperty('location')) {\n                queryMap(localStorage.location.split(','),map);\n            }\n        });\n        map.on('mouseup', () => {\n            setBoundries(map);\n        });\n        map.on('zoomend', () => {\n            setBoundries(map);\n        });\n        \n        var nav = new mapboxgl.NavigationControl();\n        map.addControl(nav, 'top-right');\n\n        var scale = new mapboxgl.ScaleControl({\n            maxWidth: 80,\n            unit: 'metric'\n            });\n        map.addControl(scale);\n        setMap(map);\n    }, []);\n\n    return (\n        <>\n            <div className=\"Map\" ref={mapContainerRef}></div>\n            <Sidebar map={map} box={bBox} onClickHandler={queryMap.bind(this)} />\n        </>\n    );\n  }\n  \nexport default Map;","import Map from './components/map'\n\nimport './App.css'\n\nfunction App() {\n// Route implementation space\n  return (\n    <div className=\"App\">\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}